{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fdcef401",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-06T10:30:34.675430Z",
     "iopub.status.busy": "2025-03-06T10:30:34.675037Z",
     "iopub.status.idle": "2025-03-06T10:34:06.987715Z",
     "shell.execute_reply": "2025-03-06T10:34:06.986327Z"
    },
    "papermill": {
     "duration": 212.318023,
     "end_time": "2025-03-06T10:34:06.989868",
     "exception": false,
     "start_time": "2025-03-06T10:30:34.671845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset telah dipisahkan dan dipindahkan sesuai struktur yang diinginkan.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import shutil\n",
    "import random\n",
    "\n",
    "# Direktori sumber\n",
    "source_folders = {\n",
    "    \"Normal\": [\"/kaggle/input/real-time-anomaly-detection-in-cctv-surveillance/data/normal\"],\n",
    "    \"Vandalisme\": [\n",
    "        \"/kaggle/input/real-time-anomaly-detection-in-cctv-surveillance/data/vandalism\",\n",
    "        \"/kaggle/input/real-time-anomaly-detection-in-cctv-surveillance/data/arson\"\n",
    "    ],\n",
    "    \"Pencurian\": [\n",
    "        \"/kaggle/input/real-time-anomaly-detection-in-cctv-surveillance/data/burglary\",\n",
    "        \"/kaggle/input/real-time-anomaly-detection-in-cctv-surveillance/data/stealing\",\n",
    "        \"/kaggle/input/real-time-anomaly-detection-in-cctv-surveillance/data/robbery\"\n",
    "    ]\n",
    "}\n",
    "\n",
    "# Direktori tujuan\n",
    "destination_root = \"Dataset\"\n",
    "subsets = [\"Training\", \"Validation\", \"Test\"]\n",
    "categories = [\"Normal\", \"Vandalisme\", \"Pencurian\"]\n",
    "\n",
    "# Membuat struktur folder\n",
    "for subset in subsets:\n",
    "    for category in categories:\n",
    "        os.makedirs(os.path.join(destination_root, subset, category), exist_ok=True)\n",
    "\n",
    "# Fungsi untuk mengambil file dari direktori sumber\n",
    "def collect_files(source_dirs, limit=None):\n",
    "    files = []\n",
    "    for source_dir in source_dirs:\n",
    "        if os.path.exists(source_dir):\n",
    "            files.extend([os.path.join(source_dir, f) for f in os.listdir(source_dir) if os.path.isfile(os.path.join(source_dir, f))])\n",
    "    if limit:\n",
    "        files = random.sample(files, min(limit, len(files)))\n",
    "    return files\n",
    "\n",
    "# Mengumpulkan data\n",
    "file_data = {\n",
    "    \"Normal\": collect_files(source_folders[\"Normal\"], limit=30),\n",
    "    \"Vandalisme\": collect_files(source_folders[\"Vandalisme\"]),\n",
    "    \"Pencurian\": collect_files(source_folders[\"Pencurian\"])\n",
    "}\n",
    "\n",
    "# Fungsi untuk membagi data\n",
    "def split_data(files):\n",
    "    random.shuffle(files)\n",
    "    train_size = int(0.7 * len(files))\n",
    "    val_size = int(0.2 * len(files))\n",
    "    \n",
    "    train_files = files[:train_size]\n",
    "    val_files = files[train_size:train_size + val_size]\n",
    "    test_files = files[train_size + val_size:]\n",
    "    \n",
    "    return train_files, val_files, test_files\n",
    "\n",
    "# Memindahkan file ke dalam struktur dataset\n",
    "for category, files in file_data.items():\n",
    "    train_files, val_files, test_files = split_data(files)\n",
    "    \n",
    "    for file_path in train_files:\n",
    "        shutil.copy2(file_path, os.path.join(destination_root, \"Training\", category, os.path.basename(file_path)))\n",
    "    \n",
    "    for file_path in val_files:\n",
    "        shutil.copy2(file_path, os.path.join(destination_root, \"Validation\", category, os.path.basename(file_path)))\n",
    "    \n",
    "    for file_path in test_files:\n",
    "        shutil.copy2(file_path, os.path.join(destination_root, \"Test\", category, os.path.basename(file_path)))\n",
    "\n",
    "print(\"Dataset telah dipisahkan dan dipindahkan sesuai struktur yang diinginkan.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27da2a39",
   "metadata": {
    "papermill": {
     "duration": 0.00127,
     "end_time": "2025-03-06T10:34:06.994630",
     "exception": false,
     "start_time": "2025-03-06T10:34:06.993360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2760272,
     "sourceId": 4769020,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30822,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 215.620122,
   "end_time": "2025-03-06T10:34:07.515252",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-06T10:30:31.895130",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
