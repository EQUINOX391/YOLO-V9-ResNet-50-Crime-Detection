{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7d1837d3",
   "metadata": {
    "papermill": {
     "duration": 0.002418,
     "end_time": "2025-02-15T20:03:30.020753",
     "exception": false,
     "start_time": "2025-02-15T20:03:30.018335",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<h1>Notebook 1 - Subclips Extractor</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5d66c2f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-15T20:03:30.026256Z",
     "iopub.status.busy": "2025-02-15T20:03:30.025814Z",
     "iopub.status.idle": "2025-02-15T20:03:36.230174Z",
     "shell.execute_reply": "2025-02-15T20:03:36.228766Z"
    },
    "papermill": {
     "duration": 6.209559,
     "end_time": "2025-02-15T20:03:36.232457",
     "exception": false,
     "start_time": "2025-02-15T20:03:30.022898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting ffmpeg-python\r\n",
      "  Downloading ffmpeg_python-0.2.0-py3-none-any.whl.metadata (1.7 kB)\r\n",
      "Requirement already satisfied: future in /usr/local/lib/python3.10/dist-packages (from ffmpeg-python) (1.0.0)\r\n",
      "Downloading ffmpeg_python-0.2.0-py3-none-any.whl (25 kB)\r\n",
      "Installing collected packages: ffmpeg-python\r\n",
      "Successfully installed ffmpeg-python-0.2.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install ffmpeg-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e4d0424e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-15T20:03:36.238304Z",
     "iopub.status.busy": "2025-02-15T20:03:36.237897Z",
     "iopub.status.idle": "2025-02-15T20:07:32.886683Z",
     "shell.execute_reply": "2025-02-15T20:07:32.884330Z"
    },
    "papermill": {
     "duration": 236.659072,
     "end_time": "2025-02-15T20:07:32.893800",
     "exception": false,
     "start_time": "2025-02-15T20:03:36.234728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset telah diproses dan dipindahkan sesuai struktur yang diinginkan.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import shutil\n",
    "import random\n",
    "import json\n",
    "import ffmpeg\n",
    "\n",
    "# Direktori sumber dan output\n",
    "source_root = \"/kaggle/input/crime-dataset-splitted/Dataset\"\n",
    "destination_root = \"/kaggle/working/Dataset\"\n",
    "annotation_file = \"/kaggle/input/ucf-crime-annotation/UCF Crime Dataset Annotation.json\"\n",
    "\n",
    "# Load anotasi JSON\n",
    "with open(annotation_file, 'r') as f:\n",
    "    annotations = json.load(f)\n",
    "\n",
    "# Membuat struktur folder\n",
    "subsets = [\"Training\", \"Validation\", \"Test\"]\n",
    "categories = [\"Normal\", \"Vandalisme\", \"Pencurian\"]\n",
    "for subset in subsets:\n",
    "    for category in categories:\n",
    "        os.makedirs(os.path.join(destination_root, subset, category), exist_ok=True)\n",
    "\n",
    "# Menyalin folder \"Test\" tanpa perubahan\n",
    "shutil.copytree(os.path.join(source_root, \"Test\"), os.path.join(destination_root, \"Test\"), dirs_exist_ok=True)\n",
    "\n",
    "# Menyalin file normal yang sudah ada di Training dan Validation\n",
    "for subset in [\"Training\", \"Validation\"]:\n",
    "    normal_source_folder = os.path.join(source_root, subset, \"Normal\")\n",
    "    normal_dest_folder = os.path.join(destination_root, subset, \"Normal\")\n",
    "    if os.path.exists(normal_source_folder):\n",
    "        for video in os.listdir(normal_source_folder):\n",
    "            shutil.copy2(os.path.join(normal_source_folder, video), os.path.join(normal_dest_folder, video))\n",
    "\n",
    "# Fungsi untuk memotong video\n",
    "def cut_video(input_path, output_path, start, end):\n",
    "    ffmpeg.input(input_path, ss=start, to=end).output(output_path, c=\"copy\").run(overwrite_output=True)\n",
    "\n",
    "# Memproses Training & Validation\n",
    "for subset in [\"Training\", \"Validation\"]:\n",
    "    for category in [\"Vandalisme\", \"Pencurian\"]:\n",
    "        source_folder = os.path.join(source_root, subset, category)\n",
    "        if not os.path.exists(source_folder):\n",
    "            continue\n",
    "        \n",
    "        for video in os.listdir(source_folder):\n",
    "            video_path = os.path.join(source_folder, video)\n",
    "            if video not in annotations:\n",
    "                shutil.copy2(video_path, os.path.join(destination_root, subset, category, video))\n",
    "                continue\n",
    "            \n",
    "            for idx, segment in enumerate(annotations[video]):\n",
    "                start, end = segment[\"start\"], segment[\"end\"]\n",
    "                output_video_path = os.path.join(destination_root, subset, category, f\"{video[:-4]}_part{idx}.mp4\")\n",
    "                cut_video(video_path, output_video_path, start, end)\n",
    "            \n",
    "            # Memotong bagian di luar kejadian dan memasukkan ke \"Normal\"\n",
    "            prev_end = 0\n",
    "            for segment in annotations[video]:\n",
    "                start, end = segment[\"start\"], segment[\"end\"]\n",
    "                if prev_end < start:\n",
    "                    normal_output_path = os.path.join(destination_root, subset, \"Normal\", f\"{video[:-4]}_normal{prev_end}-{start}.mp4\")\n",
    "                    cut_video(video_path, normal_output_path, prev_end, start)\n",
    "                prev_end = end\n",
    "            \n",
    "            # Menangani bagian setelah kejadian terakhir\n",
    "            video_duration = int(ffmpeg.probe(video_path)['format']['duration'].split('.')[0])\n",
    "            if prev_end < video_duration:\n",
    "                normal_output_path = os.path.join(destination_root, subset, \"Normal\", f\"{video[:-4]}_normal{prev_end}-{video_duration}.mp4\")\n",
    "                cut_video(video_path, normal_output_path, prev_end, video_duration)\n",
    "\n",
    "print(\"Dataset telah diproses dan dipindahkan sesuai struktur yang diinginkan.\")\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6652619,
     "sourceId": 10731025,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6421281,
     "sourceId": 10759448,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 246.360598,
   "end_time": "2025-02-15T20:07:33.521700",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-15T20:03:27.161102",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
